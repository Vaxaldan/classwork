package co.grandcircus;   // Identify the package this code belongs to

/*****************************************************************************************************
 * Java DOES NOT have properties to access private data like in C#
 * 
 * Java use methods to get and set private data (getters and setters)
 * 
 * Every private dat member must hve getters and setters if you want
 *       to allow access to the data
 * 
 * Most IDEs will automatically generate getters and setters (and other methods) for you!
 * (YOU must be sure all private variables are defined BEFORE having the IDE generate ANY code)
 * If you add variables AFTER generating code with the IDE, you must regenerate the code
 *                            or modify the generated code yourself   
 * 
 * Getters and Setters (and other methods) generated by the IDE 
 *             follow standard Java naming conventions:
 * 
 *      getters: getVariableName
 *      setters: setVariableName
 *   
 * Most Object Oriented classes have:
 * 
 * (A Java Plain Old Java Object (POJO) has all these)
 * 
 *     1. Getters/Setters (C# properties)
 *     2. Constructors - set initial values for data in an object;
 *                       including a default ctor
 *     3. toString() - represent the object as a String (ToString in C#) 
 *     4. equals() - compare the contents of two objects (Equals in C#)
 *                   (needed because == only compares the locations not the content)
 *     5. hashCode() - generate a unique int value for the object (HashCode in C#)
 *                     (hashCode is sometimes used to determine if two objects are equal)
 *
 *
 **********************************************************************************************/
public class Call {

    //---------------------------------------------------------------------------------------
    // member variables - note private to enforce encapsulation (just like C#)
    //--------------------------------------------------------------------------------------

    private int    date;   // Define variable - initial value set by constructor
    private String notes;  // Define variable - initial value set by constructor

    //---------------------------------------------------------------------------------------
    // Constructors to initialize data members when an object of the class us instantiated
    //--------------------------------------------------------------------------------------

    // If a class has any constructors it MUST provide a default constructor in case Java needs it
    //
    // If a class has no constructors, Java provides a default constructor

    public Call() {}                      // Default constructor in case Java needs it

    public Call(int date, String notes) { // tw0-arg constructor
        this.date = date;
        this.notes = notes;
    }

    //---------------------------------------------------------------------------------------
    // Getters and Setters to allow controlled access to class data members
    // (Required because Java does not have Properties like C# to control access)
    //
    // You only need to include getters and setters for data members you want to be
    //      accessible to those using objects of teh class
    //
    // For example: If you would like a data member to be read-only
    //              provide a getter but but not a setter     
    //--------------------------------------------------------------------------------------

    public int getDate() {
        return date;
    }
    public void setDate(int date) {
        this.date = date;
    }
    public String getNotes() {
        return notes;
    }
    public void setNotes(String notes) {
        this.notes = notes;
    }

    //-------------------------------------------------------------------------------------------
    // Standard overrides - replace standard system behavior with custom behavior for the class
    // 
    // These standard overrides are used "behind the scenes" by Java,
    //       many times, without you knowing it
    //
    // Typical overrides:
    //
    //  public int hashCode() - Generate a hashCode based on object data member values
    //                          Standard behavior is to generate hashCode based on object location
    //                          (Since objects of the same class with same data should generate
    //                          the same hashCode, standard behavior is unacceptable)
    //
    //  public boolean equals(Object obj) - Determine is two objects of the class are equal based
    //                                             on the content of their data members 
    //                                      Standard behavior is to compare abject locations for equality    
    //
    //  public String toString() - Return a representation of an object as a String
    //                             Standard behavior is to return: packageName.className@Location
    //--------------------------------------------------------------------------------------------

    @Override
    public int hashCode() {
        // final is Java version of const in C#
        final int prime = 31;
        int result = 1;
        result = prime * result + date;
        result = prime * result + ((notes == null) ? 0 : notes.hashCode());
        return result;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;

        Call other = (Call) obj; // Instantiate an object class so we can access the data   
        
        if (date != other.date)
            return false;
        if (notes == null) {
            if (other.notes != null)
                return false;
        } else if (!notes.equals(other.notes))
            return false;
        return true;
    }

    @Override
    public String toString() {
        return "Call [date=" + date + ", notes=" + notes + ", getClass()=" + getClass() + "]";
    }
}  // End of Call class
